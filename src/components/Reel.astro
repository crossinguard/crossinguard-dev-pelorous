---
/**
 * REEL
 * More info: https://every-layout.dev/layouts/reel/
 * A horizontal scrolling layout for browsing categories of content
 * (movies, products, news stories, photographs). A robust alternative
 * to carousel/slider components.
 */

interface Props {
    /** Space between items. Falls back to --gutter, then var(--space-s) */
    space?: string;
    /** Width of each item */
    itemWidth?: string;
    /** Height of the reel */
    height?: string;
}

const { space, itemWidth, height } = Astro.props;
---

<div
    class="reel"
    style={{
        ...(space && { "--reel-space": space }),
        ...(itemWidth && { "--reel-item-width": itemWidth }),
        ...(height && { "--reel-height": height }),
    }}
>
    <slot />
</div>

<style>
    .reel {
        display: flex;
        block-size: var(--reel-height, auto);
        overflow-x: auto;
        overflow-y: hidden;
        scrollbar-color: var(--color-light) var(--color-dark);
    }

    .reel::-webkit-scrollbar {
        block-size: 1rem;
    }

    .reel::-webkit-scrollbar-track {
        background-color: var(--color-dark);
    }

    .reel::-webkit-scrollbar-thumb {
        background-color: var(--color-dark);
        background-image: linear-gradient(
            var(--color-dark) 0,
            var(--color-dark) 0.25rem,
            var(--color-light) 0.25rem,
            var(--color-light) 0.75rem,
            var(--color-dark) 0.75rem
        );
    }

    .reel > :global(*) {
        flex: 0 0 var(--reel-item-width, auto);
    }

    .reel > :global(img) {
        block-size: 100%;
        flex-basis: auto;
        inline-size: auto;
    }

    .reel > :global(* + *) {
        margin-inline-start: var(--reel-space, var(--gutter, var(--space-s)));
    }

    .reel.overflowing {
        padding-block-end: var(--reel-space, var(--gutter, var(--space-s)));
    }
</style>

<script>
    const reels = document.querySelectorAll(".reel");

    const toggleOverflowClass = (elem: Element) => {
        const isOverflowing = elem.scrollWidth > elem.clientWidth;
        elem.classList.toggle("overflowing", isOverflowing);
    };

    reels.forEach((reel) => {
        if ("ResizeObserver" in window) {
            new ResizeObserver((entries) => {
                toggleOverflowClass(entries[0].target);
            }).observe(reel);
        }

        if ("MutationObserver" in window) {
            new MutationObserver((mutations) => {
                toggleOverflowClass(mutations[0].target as Element);
            }).observe(reel, { childList: true });
        }
    });
</script>
