---
import BaseLayout from "../../layouts/BaseLayout.astro";
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import { getCollection, render } from "astro:content";

export async function getStaticPaths() {
    const projects = await getCollection("projects");
    return projects.map((project) => ({
        params: { id: project.id },
        props: { project },
    }));
}

const { project } = Astro.props;
const { Content } = await render(project);

// Date formatting helper
const formatDate = (date: Date) =>
    date.toLocaleDateString("en-US", {
        year: "numeric",
        month: "short",
        day: "numeric",
    });

const pubDate = formatDate(project.data.pubDate);
const updatedDate = project.data.updatedDate
    ? formatDate(project.data.updatedDate)
    : null;

const images = import.meta.glob<{ default: ImageMetadata }>(
    "/src/assets/**/*.{jpeg,jpg,png,gif,webp,avif}",
);
---

<BaseLayout title={project.data.title} description={project.data.description}>
    <article class="flow">
        <h1 class="title">{project.data.title}</h1>
        <p class="description">{project.data.description}</p>
        {
            project.data.tags && project.data.tags.length > 0 && (
                <ul role="list" class="tags cluster">
                    {project.data.tags.map((tag) => (
                        <li class="tag">#{tag}</li>
                    ))}
                </ul>
            )
        }
        <div class="date-status repel">
            <p class="date">
                posted <time datetime={project.data.pubDate.toISOString()}
                    >{pubDate}</time
                >
                {
                    project.data.updatedDate && (
                        <>
                            {" "}
                            â€¢{" "}
                            <span>
                                updated{" "}
                                <time
                                    datetime={project.data.updatedDate.toISOString()}
                                >
                                    {updatedDate}
                                </time>
                            </span>
                        </>
                    )
                }
            </p>
            <p class="status">{project.data.status}</p>
        </div>

        <hr />
        {
            project.data.image &&
                (() => {
                    const imagePath = project.data.image.src;
                    if (!images[imagePath]) {
                        throw new Error(
                            `Image not found: "${imagePath}". ` +
                                `Available images: ${Object.keys(images).join(", ")}`,
                        );
                    }
                    return (
                        <figure class="project-image">
                            <Image
                                src={images[imagePath]()}
                                alt={project.data.image.alt}
                            />
                        </figure>
                    );
                })()
        }
        <div class="content flow">
            <Content />
        </div>
    </article>
</BaseLayout>

<style>
    .project-image {
        margin-block-end: var(--space-xl);
    }

    .project-image img {
        width: auto;
        height: 100%;
        max-height: 50rem;
        margin-inline: auto;
        border: solid var(--space-s) var(--color-dark);
    }

    .date,
    .status {
        font-size: var(--step-0);
        opacity: 0.8;
    }

    .tags {
        font-size: var(--step--1);
        opacity: 0.8;
        padding: 0;
        font-family: var(--font-family-mono);
    }

    hr {
        border: none;
        border-block: 2px solid var(--color-primary);
        opacity: 0.3;
    }
</style>
